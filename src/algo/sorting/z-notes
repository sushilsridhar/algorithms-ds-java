
Sorting
 - arrangement of data, based on a property, in increasing or decreasing order

Stable sort
 - if property of comparison for two elements are same, maintain the original order, the first element in the array will be first and second will be second

Selection sort
 - find the max element in the array,
 - swap and put it at the end of the array, now array contains, sorted and unsorted parts,
 - repeat for unsorted part of array

   time complexity: O(n^2), space complexity: O(1)

Bubble Sort
 - swap two adjacent elements in the array, starting from 0 to n-1, this step must be done n times, to completely sort the array

   time complexity: O(n^2), space complexity: O(1)

InsertionSort
 - starting from index 1, check if the previous element > current element,
 - if yes, shift the previous element to the right side, move to previous to previous element in sorted part of array,
 - keep shifting the previous elements to the right until, previous element < current element,
 - now insert at the right position, after one insertion, we will have sorted and unsorted array parts

   time complexity: O(n^2), space complexity: O(1)